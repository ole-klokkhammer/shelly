# set default substitutions if not defined in config
substitutions:
  friendly_name: "Entrance Roof"
  device_name: entrance-roof
  max_temp: "70" # °C
  dim_lenght: "20s"
  restore_mode_light: "restore_default_off"
  restore_mode_switch: "restore_default_off"
  min_brightness: "470"
  max_brightness: "1000"
  leading_edge: "false"
  gamma_correct: "0"
  light_icon: mdi:lightbulb
  control_light_default: "true"
  light_power_id: "dimmer_power"

packages:
  network: !include common/network.yaml
  common: !include common/common.yaml

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp8266:
  board: esp01_1m

uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 115200

# globals for dim action and light control
globals:
  - id: control_light
    type: bool
    restore_value: true
    initial_value: ${control_light_default}

light:
  - platform: shelly_dimmer
    name: ${device_name}
    id: dimmer
    icon: ${light_icon}
    leading_edge: ${leading_edge}
    min_brightness: ${min_brightness}
#    max_brightness: ${max_brightness}
    restore_mode: ${restore_mode_light}
    default_transition_length: 1s
    gamma_correct: ${gamma_correct}
    power:
      id: ${light_power_id}
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Slow Pulse"
    firmware:
      version: "51.6"
      update: true


binary_sensor:
  - platform: gpio
    name: Dim Down
    id: sensor_dim_down
    pin:
      number: GPIO12
      mode: INPUT
    internal: false
    on_multi_click:
      - timing:
          - ON for at most 300ms
        then:
          - logger.log: "Physical short press (dim_down) trigger"
          - script.execute: script_turn_off
      - timing:
          - ON for at least 300ms
        then:
          - logger.log: "Physical long press (dim_down) trigger"
          - script.execute: script_dim_down_timer
          - script.execute: script_dim_down
    on_release:
      then:
        - if:
            condition:
              light.is_on:
                id: dimmer
            then:
              - logger.log: "Physical dim_down release trigger"
              - script.stop: script_dim_down_timer
              - logger.log: "Script_dim_down_timer stopped"

  - platform: gpio
    name: Dim Up
    id: sensor_dim_up
    pin:
      number: GPIO14
      mode: INPUT
    internal: false
    on_multi_click:
      - timing:
          - ON for at most 300ms
        then:
          - logger.log: "Physical short press (dim_up) trigger"
          - script.execute: script_turn_on
      - timing:
          - ON for at least 300ms
        then:
          - logger.log: "Physical long press (dim_up) trigger"
          - script.execute: script_dim_up_timer
          - script.execute: script_dim_up
    on_release:
      then:
        - if:
            condition:
              light.is_on:
                id: dimmer
            then:
              - logger.log: "Physical dim_up release trigger"
              - script.stop: script_dim_up_timer
              - logger.log: "Script_dim_up_timer stopped"

script:
  - id: script_turn_on
    mode: single
    then:
      - logger.log: "Turn_on script started"
      - light.turn_on:
          id: dimmer
#          brightness: !lambda |-
#            return id(dimmer).remote_values.get_brightness();

  - id: script_turn_off
    mode: single
    then:
      - logger.log: "Turn_off script started"
      - light.turn_off:
          id: dimmer
      - logger.log: "Light turned off"

  - id: script_dim_down_timer
    mode: restart
    then:
      - logger.log: "Dim-down timer script started"
      - delay: ${dim_lenght}
      - logger.log: "Dim-down timer script finished"

  - id: script_dim_down
    mode: single
    then:
      - logger.log: "Start dimming down"
      - while:
          condition:
            and:
              - script.is_running: script_dim_down_timer
              - light.is_on: dimmer
              - lambda: "return(id(dimmer).remote_values.get_brightness() >= 0.01);"
          then:
            - light.dim_relative:
                id: dimmer
                relative_brightness: -0.5%
                transition_length: 0.01s
            - delay: 0.01s
      - logger.log: "Dimming down stopped"
      - logger.log: "Toggled dim action to dim up"

  - id: script_dim_up_timer
    mode: restart
    then:
      - logger.log: "Dim-up timer script started"
      - delay: ${dim_lenght}
      - logger.log: "Dim-up timer script finished"

  - id: script_dim_up
    mode: single
    then:
      - while:
          condition:
            and:
              - script.is_running: script_dim_up_timer
              - light.is_on: dimmer
              - lambda: "return(id(dimmer).remote_values.get_brightness() <= 0.999);"
          then:
            - light.dim_relative:
                id: dimmer
                relative_brightness: 0.5%
                transition_length: 0.01s
            - delay: 0.01s
      - logger.log: "Dimming up stopped"
      - logger.log: "Toggled dim action to dim down"



button:
  - platform: template
    name: Dim Down
    on_press:
      then:
        - script.execute: script_dim_down_timer
        - script.execute: script_dim_down

  - platform: template
    name: Dim Up
    on_press:
      then:
        - script.execute: script_dim_up_timer
        - script.execute: script_dim_up

  - platform: template
    name: Dim Stop
    on_press:
      then:
        - logger.log: "Stopping timer script"
        - script.stop: script_dim_down_timer
        - script.stop: script_dim_up_timer


# switches to determine light control and dim action
switch:
  - platform: template
    name: Control Light
    id: control_light_active
    restore_mode: ${restore_mode_switch}
    turn_on_action:
      - globals.set:
          id: control_light
          value: "true"
    turn_off_action:
      - globals.set:
          id: control_light
          value: "false"
    lambda: |-
      return id(control_light);
    entity_category: config


# Important: don't change this sensor-part unless you know what you are doing.
# These sensors will shut the light down when overheating temperature is reached.
sensor:
  - platform: adc
    id: temp_analog_reading
    pin: A0

  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm

  - platform: ntc
    sensor: temp_resistance_reading
    name: Temperature
    id: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value:
      then:
        - if:
            condition:
              - sensor.in_range:
                  id: temperature
                  above: ${max_temp}
              - light.is_on: dimmer
            then:
              - light.turn_off:
                  id: dimmer
              - logger.log: "Switch turned off because temperature exceeded ${max_temp}°C"
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Message from ${friendly_name}
                  data_template:
                    message: Switch turned off because temperature exceeded ${max_temp}°C
    on_value_range:
      - above: ${max_temp}
        then:
          - logger.log: "Temperature exceeded ${max_temp}°C"
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${friendly_name}
              data_template:
                message: Temperature exceeded ${max_temp}°C

  - platform: total_daily_energy
    name: "Daily Energy"
    power_id: ${light_power_id}
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
